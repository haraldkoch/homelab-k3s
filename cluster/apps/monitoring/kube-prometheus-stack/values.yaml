global:
  rbac:
    pspEnabled: false

server:
  resources:
    requests:
      memory: 1500Mi
      cpu: 1
    limits:
      memory: 2000Mi

alertmanager:
  config:
    receivers:
      - name: "null"
      - name: "discord"
        webhook_configs:
          - url: "http://alertmanager-discord:9094"
            send_resolved: true
    route:
      group_by: ["alertname", "job"]
      group_wait: 30s
      group_interval: 5m
      repeat_interval: 6h
      receiver: "discord"
      routes:
        - receiver: "null"
          matchers:
            - alertname = Watchdog
        - receiver: "discord"
          matchers:
            # - severity =~ critical|warning
            - severity = critical
          continue: true

    inhibit_rules:
      - source_matchers:
          - severity = "critical"
        target_matchers:
          - severity = "warning"
        equal: ["alertname", "namespace"]

  ingress:
    enabled: true
    ingressClassName: "traefik"
    annotations:
      hajimari.io/appName: "alertmanager"
      hajimari.io/enable: "true"
      hajimari.io/icon: "alarm-light-outline"
      traefik.ingress.kubernetes.io/router.entrypoints: "websecure"
    hosts:
      - alertmanager.${SECRET_INTERNAL_DOMAIN}
    paths:
      - /
    pathType: ImplementationSpecific
    tls:
      - hosts:
          - alertmanager.${SECRET_INTERNAL_DOMAIN}
  alertmanagerSpec:
    storage:
      volumeClaimTemplate:
        spec:
          storageClassName: "zfs-nfs"
          resources:
            requests:
              storage: 1Gi

grafana:
  enabled: false

nodeExporter:
  enabled: false

prometheus:
  ingress:
    enabled: true
    ingressClassName: "traefik"
    annotations:
      hajimari.io/appName: "prometheus"
      hajimari.io/enable: "true"
      hajimari.io/icon: "chart-line"
      traefik.ingress.kubernetes.io/router.entrypoints: "websecure"
    hosts:
      - prometheus.${SECRET_INTERNAL_DOMAIN}
    paths:
      - /
    pathType: ImplementationSpecific
    tls:
      - hosts:
          - prometheus.${SECRET_INTERNAL_DOMAIN}

  prometheusSpec:
    podMonitorSelectorNilUsesHelmValues: false
    probeSelectorNilUsesHelmValues: false
    ruleSelectorNilUsesHelmValues: false
    serviceMonitorSelectorNilUsesHelmValues: false

    remoteWrite:
      - url: http://heimdall.${PRIVATE_STATIC_DOMAIN}:8428/api/v1/write
        queueConfig:
          maxSamplesPerSend: 10000
          maxShards: 30

    storageSpec:
      volumeClaimTemplate:
        spec:
          storageClassName: zfs-nfs
          resources:
            requests:
              storage: 10Gi

    affinity:
      nodeAffinity:
        requiredDuringSchedulingIgnoredDuringExecution:
          nodeSelectorTerms:
            - matchExpressions:
                # FIXME - use a different key for this
                - key: ${SECRET_INTERNAL_DOMAIN}/prometheus
                  operator: In
                  values:
                    - "true"

# cannot be monitored in k3s; runs on localhost
kubeControllerManager:
  enabled: false
kubeScheduler:
  enabled: false

# we do not have an etcd instance
kubeEtcd:
  enabled: false

defaultRules:
  rules:
    etcd: false
    kubeProxy: false
