---
apiVersion: helm.toolkit.fluxcd.io/v2beta1
kind: HelmRelease
metadata:
  name: kube-prometheus-stack
  namespace: monitoring
spec:
  interval: 5m
  chart:
    spec:
      # renovate: registryUrl=https://prometheus-community.github.io/helm-charts
      chart: kube-prometheus-stack
      version: 27.0.0
      sourceRef:
        kind: HelmRepository
        name: prometheus-community-charts
        namespace: flux-system
      interval: 5m

  valuesFrom:
    - kind: Secret
      name: kube-prometheus-stack
      valuesKey: discord-webhook
      targetPath: alertmanager.config.global.slack_api_url
      optional: false

  values:
    global:
      rbac:
        pspEnabled: false

    server:
      resources:
        requests:
          memory: 1500Mi
          cpu: 25m
        limits:
          memory: 2000Mi

    alertmanager:
      config:
        receivers:
          - name: "null"
          - name: "discord"
            slack_configs:
              - channel: "#alerts"
                icon_url:
                username: Prometheus
                send_resolved: true
                title: |-
                  [{{ .Status | toUpper }}{{ if eq .Status "firing" }}:{{ .Alerts.Firing | len }}{{ end }}] {{ if ne .CommonAnnotations.summary ""}}{{ .CommonAnnotations.summary }} {{ else if ne .CommonAnnotations.message ""}}{{ .CommonAnnotations.message }} {{ else if ne .CommonAnnotations.description ""}}{{ .CommonAnnotations.description }} {{ else }}{{ .CommonLabels.alertname }}{{ end }}
                text: >-
                  {{ range .Alerts -}}
                    *Alert:* {{ .Annotations.title }}{{ if .Labels.severity }} - `{{ .Labels.severity }}`{{ end }}
                  {{ if ne .Annotations.summary ""}}*Summary:* {{ .Annotations.summary }} {{ else if ne .Annotations.message ""}}*Message:* {{ .Annotations.message }} {{ else if ne .Annotations.description ""}}*Description:* {{ .Annotations.description }}{{ end }}
                  *Details:*
                    {{ range .Labels.SortedPairs }} â€¢ *{{ .Name }}:* `{{ .Value }}`
                    {{ end }}
                  {{ end }}

        route:
          group_by: ["alertname", "job"]
          group_wait: 30s
          group_interval: 5m
          repeat_interval: 6h
          receiver: "discord"
          routes:
            - receiver: "null"
              match:
                alertname: Watchdog
            - receiver: "discord"
              match_re:
                # severity: critical|warning
                severity: critical
              continue: true

        inhibit_rules:
          - source_match:
              severity: "critical"
            target_match:
              severity: "warning"
            equal: ["alertname", "namespace"]

      ingress:
        enabled: true
        ingressClassName: "traefik"
        annotations:
          cert-manager.io/cluster-issuer: "letsencrypt-production"
          hajimari.io/appName: "alertmanager"
          hajimari.io/enable: "true"
          hajimari.io/icon: "alarm-light-outline"
          traefik.ingress.kubernetes.io/router.entrypoints: "websecure"
        hosts:
          - alertmanager.${SECRET_DOMAIN}
        paths:
          - /
        pathType: ImplementationSpecific
        tls:
          - secretName: alertmanager-general-tls
            hosts:
              - alertmanager.${SECRET_DOMAIN}
      alertmanagerSpec:
        storage:
          volumeClaimTemplate:
            spec:
              storageClassName: "zfs-nfs"
              resources:
                requests:
                  storage: 1Gi

    grafana:
      adminPassword: ${SECRET_GRAFANA_PASSWORD}
      defaultDashboardsTimezone: America/Toronto

      sidecar:
        dashboards:
          searchNamespace: ALL

      plugins:
        - grafana-clock-panel
        - grafana-piechart-panel

      ingress:
        enabled: true
        ingressClassName: "traefik"
        annotations:
          cert-manager.io/cluster-issuer: "letsencrypt-production"
          hajimari.io/appName: "grafana"
          hajimari.io/enable: "true"
          hajimari.io/icon: "chart-line"
          traefik.ingress.kubernetes.io/router.entrypoints: "websecure"
        hosts:
          - grafana.${SECRET_DOMAIN}
        path: /
        tls:
          - secretName: grafana-general-tls
            hosts:
              - grafana.${SECRET_DOMAIN}

    nodeExporter:
      enabled: false

    prometheus:
      ingress:
        enabled: true
        ingressClassName: "traefik"
        annotations:
          cert-manager.io/cluster-issuer: "letsencrypt-production"
          hajimari.io/appName: "prometheus"
          hajimari.io/enable: "true"
          hajimari.io/icon: "chart-line"
          traefik.ingress.kubernetes.io/router.entrypoints: "websecure"
        hosts:
          - prometheus.${SECRET_DOMAIN}
        paths:
          - /
        pathType: ImplementationSpecific
        tls:
          - secretName: prometheus-general-tls
            hosts:
              - prometheus.${SECRET_DOMAIN}

      prometheusSpec:
        podMonitorSelectorNilUsesHelmValues: false
        probeSelectorNilUsesHelmValues: false
        ruleSelectorNilUsesHelmValues: false
        serviceMonitorSelectorNilUsesHelmValues: false

        storageSpec:
          volumeClaimTemplate:
            spec:
              storageClassName: zfs-nfs
              resources:
                requests:
                  storage: 10Gi

    # cannot be monitored in k3s; runs on localhost
    kubeControllerManager:
      enabled: false
    kubeScheduler:
      enabled: false

    # we do not have an etcd instance
    kubeEtcd:
      enabled: false

    defaultRules:
      rules:
        etcd: false
