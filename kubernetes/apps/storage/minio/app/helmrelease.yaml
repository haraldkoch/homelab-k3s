---
# yaml-language-server: $schema=https://kubernetes-schemas.haraldkoch.ca/helm.toolkit.fluxcd.io/helmrelease_v2beta1.json
apiVersion: helm.toolkit.fluxcd.io/v2beta1
kind: HelmRelease
metadata:
  name: &app minio
  namespace: storage
spec:
  interval: 30m
  chart:
    spec:
      chart: app-template
      version: 1.5.1
      sourceRef:
        kind: HelmRepository
        name: bjw-s
        namespace: flux-system
  maxHistory: 2
  install:
    remediation:
      retries: 3
  upgrade:
    cleanupOnFail: true
    remediation:
      retries: 3
  uninstall:
    keepHistory: false
  values:
    controller:
      annotations:
        reloader.stakater.com/auto: "true"
    image:
      repository: quay.io/minio/minio
      tag: RELEASE.2023-09-30T07-02-29Z
    env:
      TZ: "${TIMEZONE}"
      MINIO_UPDATE: "off"
      MINIO_PROMETHEUS_URL: http://kube-prometheus-stack-prometheus.monitoring:9090
      MINIO_PROMETHEUS_JOB_ID: minio
      MINIO_BROWSER_REDIRECT_URL: https://minio.${CLUSTER_DOMAIN}
      MINIO_SERVER_URL: https://s3.${CLUSTER_DOMAIN}
      MINIO_API_CORS_ALLOW_ORIGIN: https://minio.${CLUSTER_DOMAIN},https://s3.${CLUSTER_DOMAIN}
      # MINIO_IDENTITY_OPENID_CONFIG_URL: "https://auth.${CLUSTER_DOMAIN}/.well-known/openid-configuration"
      # MINIO_IDENTITY_OPENID_CLIENT_ID: minio
      # MINIO_IDENTITY_OPENID_CLIENT_SECRET: "${SECRET_MINIO_OAUTH_CLIENT_SECRET}"
      # MINIO_IDENTITY_OPENID_SCOPES: "openid,profile,email,groups"
      # MINIO_IDENTITY_OPENID_REDIRECT_URI: "https://minio.${CLUSTER_DOMAIN}/oauth_callback"
    envFrom:
      - secretRef:
          name: *app
    args: ["server", "/data", "--console-address", ":9001"]
    service:
      main:
        enabled: true
        ports:
          http:
            port: &console-port 9001
          api:
            enabled: true
            port: &api-port 9000
    serviceMonitor:
      main:
        enabled: true
        endpoints:
          - port: api
            scheme: http
            path: /minio/v2/metrics/cluster
            interval: 1m
            scrapeTimeout: 10s
            bearerTokenSecret:
              name: minio-prometheus
              key: token
    probes:
      liveness: &probes
        enabled: true
        custom: true
        spec:
          httpGet:
            path: /minio/health/live
            port: *api-port
          initialDelaySeconds: 0
          periodSeconds: 10
          timeoutSeconds: 1
          failureThreshold: 3
      readiness: *probes
      startup:
        enabled: false
    ingress:
      main:
        enabled: true
        ingressClassName: nginx
        annotations:
          hajimari.io/icon: mdi:pail
        hosts:
          - host: &console-host "{{ .Release.Name }}.${CLUSTER_DOMAIN}"
            paths:
              - path: /
                pathType: Prefix
                service:
                  port: *console-port
        tls:
          - hosts:
              - *console-host
      s3:
        enabled: true
        ingressClassName: nginx
        annotations:
          hajimari.io/enable: "false"
          nginx.ingress.kubernetes.io/proxy-connect-timeout: "180"
          nginx.ingress.kubernetes.io/proxy-body-size: 1024m
          nginx.ingress.kubernetes.io/proxy-request-buffering: "off"
          nginx.ingress.kubernetes.io/configuration-snippet: |
            chunked_transfer_encoding off;
        hosts:
          - host: &api-host s3.${CLUSTER_DOMAIN}
            paths:
              - path: /
                pathType: Prefix
                service:
                  port: *api-port
        tls:
          - hosts:
              - *api-host
    podSecurityContext:
      runAsUser: 103
      runAsGroup: 103
      fsGroup: 103
      fsGroupChangePolicy: OnRootMismatch
    persistence:
      data:
        enabled: true
        type: nfs
        server: ${SECRET_BACKUP_SERVER}
        path: /tank/minio/k8s
        mountPath: /data
    resources:
      requests:
        memory: 100Mi
        cpu: 100m
      limits:
        memory: 750Mi
