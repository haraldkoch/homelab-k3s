---
version: "3"

vars:
  CLUSTER_DIR: "{{.ROOT_DIR}}/kubernetes"
  CLUSTER_SECRETS_FILE: "{{.CLUSTER_DIR}}/flux/vars/cluster-secrets.sops.env"
  CLUSTER_SETTINGS_FILE: "{{.CLUSTER_DIR}}/flux/vars/cluster-settings.env"

tasks:

  apply:
    desc: Apply a Kustomization resource path for a cluster
    summary: task {{.TASK}} [ks=apps/default/plex/app]
    dotenv: ['{{.KUBERNETES_DIR}}/flux/vars/cluster-settings.env']
    cmd: |
      sops exec-env {{.KUBERNETES_DIR}}/flux/vars/cluster-secrets.sops.env \
        "kustomize build --load-restrictor=LoadRestrictionsNone {{.KUBERNETES_DIR}}/{{.ks}} | \
          envsubst | kubectl apply --server-side --field-manager=kustomize-controller -f -"
    vars:
      ks: '{{ or .ks (fail "Missing path (`ks` var)") }}'
    preconditions:
      - { msg: "Kustomization path not found", sh: "test -d {{.KUBERNETES_DIR}}/{{.ks}}" }
      - { msg: "Cluster settings not found", sh: "test -f {{.KUBERNETES_DIR}}/flux/vars/cluster-settings.env" }
      - { msg: "Cluster secrets not found", sh: "test -f {{.KUBERNETES_DIR}}/flux/vars/cluster-secrets.sops.env" }

  gr-sync:
    desc: Sync Flux GitRepositories
    cmds:
      - |
        kubectl get gitrepositories --all-namespaces --no-headers | awk '{print $1, $2}' \
          | xargs --max-procs=4 -l bash -c \
            'kubectl -n $0 annotate gitrepository/$1 reconcile.fluxcd.io/requestedAt=$(date +%s) --field-manager=flux-client-side-apply --overwrite'

  ks-sync:
    desc: Sync Flux Kustomizations
    cmds:
      - |
        kubectl get kustomization --all-namespaces --no-headers | awk '{print $1, $2}' \
          | xargs --max-procs=4 -l bash -c \
            'kubectl -n $0 annotate kustomization/$1 reconcile.fluxcd.io/requestedAt="$(date +%s)" --field-manager=flux-client-side-apply --overwrite'

  hr-sync:
    desc: Sync Flux HelmReleases
    cmds:
      - |
        kubectl get helmreleases --all-namespaces --no-headers | awk '{print $1, $2}' \
          | xargs --max-procs=4 -l bash -c \
            'kubectl -n $0 annotate helmrelease/$1 reconcile.fluxcd.io/requestedAt="$(date +%s)" --overwrite'

  tf-sync:
    desc: Sync Flux Terraforms
    cmds:
      - |
        kubectl get terraforms --all-namespaces --no-headers | awk '{print $1, $2}' \
          | xargs --max-procs=4 -l bash -c \
            'kubectl -n $0 annotate terraform/$1 reconcile.fluxcd.io/requestedAt="$(date +%s)" --overwrite'

  hr-suspend:
    desc: Suspend all Flux HelmReleases
    cmds:
      - |
        flux get helmrelease --all-namespaces --no-header | awk '{print $1, $2}' \
          | xargs -l bash -c 'flux -n $0 suspend helmrelease $1'

  hr-resume:
    desc: Resume all Flux HelmReleases
    cmds:
      - |
        flux get helmrelease --all-namespaces --no-header | awk '{print $1, $2}' \
          | xargs -l bash -c 'flux -n $0 resume helmrelease $1'

  hr-fix:
    cmds:
      - kubectl -n {{.namespace}} delete secret -l owner=helm,name={{.release}},status=pending-upgrade
      - flux -n {{.namespace}} reconcile hr {{.release}}
    vars:
      release: '{{ or .release (fail "HelmRelease `release` is required") }}'
      namespace: '{{.namespace | default "default"}}'

  hr-restart:
    desc: Restart all failed Helm Releases
    cmds:
      - kubectl get hr --all-namespaces | grep False | awk '{print $2, $1}' | xargs -l bash -c 'flux suspend hr $0 -n $1'
      - kubectl get hr --all-namespaces | grep False | awk '{print $2, $1}' | xargs -l bash -c 'flux resume hr $0 -n $1'
